[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "firebase_admin",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "credentials",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "MultiPartParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "FormParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pdfplumber",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pdfplumber",
        "description": "pdfplumber",
        "detail": "pdfplumber",
        "documentation": {}
    },
    {
        "label": "tabula",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tabula",
        "description": "tabula",
        "detail": "tabula",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.backend.asgi",
        "description": "backend.backend.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "backend.backend.asgi",
        "documentation": {}
    },
    {
        "label": "FIREBASE_SERVICE_ACCOUNT_KEY",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "FIREBASE_SERVICE_ACCOUNT_KEY = 'backend/hostelhq-a2bae-firebase-adminsdk-cvepd-5ec032eb74.json'\ncred = credentials.Certificate(FIREBASE_SERVICE_ACCOUNT_KEY)\nfirebase_admin.initialize_app(cred)\nBASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = 'django-insecure-*@2l+^3a&bq0@8!*z_@p4jo2xnrsmzh^(l=ubzim%f8)wc^f3l'\nDEBUG = True\nALLOWED_HOSTS = ['*']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "cred",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "cred = credentials.Certificate(FIREBASE_SERVICE_ACCOUNT_KEY)\nfirebase_admin.initialize_app(cred)\nBASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = 'django-insecure-*@2l+^3a&bq0@8!*z_@p4jo2xnrsmzh^(l=ubzim%f8)wc^f3l'\nDEBUG = True\nALLOWED_HOSTS = ['*']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = 'django-insecure-*@2l+^3a&bq0@8!*z_@p4jo2xnrsmzh^(l=ubzim%f8)wc^f3l'\nDEBUG = True\nALLOWED_HOSTS = ['*']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-*@2l+^3a&bq0@8!*z_@p4jo2xnrsmzh^(l=ubzim%f8)wc^f3l'\nDEBUG = True\nALLOWED_HOSTS = ['*']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'hostelhq',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'hostelhq',\n    'corsheaders',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'hostelhq',\n    'corsheaders',\n    'rest_framework_simplejwt',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\nEMAIL_HOST = 'localhost'\nEMAIL_PORT = 1025\nEMAIL_USE_TLS = False\nEMAIL_USE_SSL = False",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\nEMAIL_HOST = 'localhost'\nEMAIL_PORT = 1025\nEMAIL_USE_TLS = False\nEMAIL_USE_SSL = False\nEMAIL_HOST_USER = ''\nEMAIL_HOST_PASSWORD = ''\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_HOST = 'localhost'\nEMAIL_PORT = 1025\nEMAIL_USE_TLS = False\nEMAIL_USE_SSL = False\nEMAIL_HOST_USER = ''\nEMAIL_HOST_PASSWORD = ''\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_PORT = 1025\nEMAIL_USE_TLS = False\nEMAIL_USE_SSL = False\nEMAIL_HOST_USER = ''\nEMAIL_HOST_PASSWORD = ''\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_USE_TLS = False\nEMAIL_USE_SSL = False\nEMAIL_HOST_USER = ''\nEMAIL_HOST_PASSWORD = ''\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': False,",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_SSL",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_USE_SSL = False\nEMAIL_HOST_USER = ''\nEMAIL_HOST_PASSWORD = ''\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': False,\n    'ALGORITHM': 'HS256',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_HOST_USER = ''\nEMAIL_HOST_PASSWORD = ''\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': False,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = ''\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': False,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'VERIFYING_KEY': None,",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': False,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'VERIFYING_KEY': None,\n    'AUTH_HEADER_TYPES': ('Bearer',),",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "ROOT_URLCONF = 'backend.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "WSGI_APPLICATION = 'backend.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nCORS_ALLOW_ALL_ORIGINS = True\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nCORS_ALLOW_ALL_ORIGINS = True\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "USE_TZ = True\nSTATIC_URL = 'static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.backend.urls",
        "description": "backend.backend.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('hostelhq.urls')),\n]\nif settings.DEBUG:\n    from django.conf.urls.static import static\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "backend.backend.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.backend.wsgi",
        "description": "backend.backend.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.backend.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.hostelhq.migrations.0001_initial",
        "description": "backend.hostelhq.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AgentListing',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('hostel_id', models.CharField(blank=True, max_length=500, null=True)),",
        "detail": "backend.hostelhq.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "UserProfileAdmin",
        "kind": 6,
        "importPath": "backend.hostelhq.admin",
        "description": "backend.hostelhq.admin",
        "peekOfCode": "class UserProfileAdmin(admin.ModelAdmin):\n    list_display = ('name', 'email', 'phone', 'created_at')\n    search_fields = ('name', 'email' )\nclass AgentListingAdmin(admin.ModelAdmin):\n    list_display = ('owner', 'address', 'amenities', 'availability', 'capacity', 'price', 'created_at')\n    search_fields = ('hostelName', 'address')\nclass ImageAdmin(admin.ModelAdmin):\n    list_display = ('image', 'uploaded_at')\n    search_fields = ('image',)\nclass TourRequestsAdmin(admin.ModelAdmin):",
        "detail": "backend.hostelhq.admin",
        "documentation": {}
    },
    {
        "label": "AgentListingAdmin",
        "kind": 6,
        "importPath": "backend.hostelhq.admin",
        "description": "backend.hostelhq.admin",
        "peekOfCode": "class AgentListingAdmin(admin.ModelAdmin):\n    list_display = ('owner', 'address', 'amenities', 'availability', 'capacity', 'price', 'created_at')\n    search_fields = ('hostelName', 'address')\nclass ImageAdmin(admin.ModelAdmin):\n    list_display = ('image', 'uploaded_at')\n    search_fields = ('image',)\nclass TourRequestsAdmin(admin.ModelAdmin):\n    list_display = ('client', 'hostel', 'requested_date')\n    search_fields = ('requested_date',)\nadmin.site.register(TourRequests, TourRequestsAdmin)",
        "detail": "backend.hostelhq.admin",
        "documentation": {}
    },
    {
        "label": "ImageAdmin",
        "kind": 6,
        "importPath": "backend.hostelhq.admin",
        "description": "backend.hostelhq.admin",
        "peekOfCode": "class ImageAdmin(admin.ModelAdmin):\n    list_display = ('image', 'uploaded_at')\n    search_fields = ('image',)\nclass TourRequestsAdmin(admin.ModelAdmin):\n    list_display = ('client', 'hostel', 'requested_date')\n    search_fields = ('requested_date',)\nadmin.site.register(TourRequests, TourRequestsAdmin)\nadmin.site.register(Image, ImageAdmin)\nadmin.site.register(AgentListing, AgentListingAdmin)\nadmin.site.register(UserProfile, UserProfileAdmin)",
        "detail": "backend.hostelhq.admin",
        "documentation": {}
    },
    {
        "label": "TourRequestsAdmin",
        "kind": 6,
        "importPath": "backend.hostelhq.admin",
        "description": "backend.hostelhq.admin",
        "peekOfCode": "class TourRequestsAdmin(admin.ModelAdmin):\n    list_display = ('client', 'hostel', 'requested_date')\n    search_fields = ('requested_date',)\nadmin.site.register(TourRequests, TourRequestsAdmin)\nadmin.site.register(Image, ImageAdmin)\nadmin.site.register(AgentListing, AgentListingAdmin)\nadmin.site.register(UserProfile, UserProfileAdmin)",
        "detail": "backend.hostelhq.admin",
        "documentation": {}
    },
    {
        "label": "HostelhqConfig",
        "kind": 6,
        "importPath": "backend.hostelhq.apps",
        "description": "backend.hostelhq.apps",
        "peekOfCode": "class HostelhqConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'hostelhq'",
        "detail": "backend.hostelhq.apps",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "kind": 6,
        "importPath": "backend.hostelhq.models",
        "description": "backend.hostelhq.models",
        "peekOfCode": "class UserProfile(models.Model):\n    # Assuming this is your user profile model\n    uid = models.CharField(max_length=255, unique=True)\n    email = models.EmailField()\n    name = models.CharField(max_length=255, blank=True, null=True)\n    phone = models.CharField(max_length=20, blank=True, null=True)\n    about = models.TextField(blank=True, null=True)\n    approvalStatus = models.CharField(max_length=20, blank=True, null=True)\n    approvedAgent = models.CharField(max_length=20, blank=True, null=True)\n    verified = models.BooleanField(blank=True, null=True)",
        "detail": "backend.hostelhq.models",
        "documentation": {}
    },
    {
        "label": "AgentListing",
        "kind": 6,
        "importPath": "backend.hostelhq.models",
        "description": "backend.hostelhq.models",
        "peekOfCode": "class AgentListing(models.Model):\n    owner = models.ForeignKey(UserProfile, on_delete=models.CASCADE)  # Link to UserProfile\n    hostel_id = models.CharField(max_length=500, blank=True, null=True)\n    agent_id = models.CharField(max_length=500, blank=True, null=True)\n    hostelName = models.CharField(max_length=200, blank=True, null=True)  # Name of the hostel\n    address = models.CharField(max_length=200, blank=True, null=True)  # Address of the hostel\n    amenities = models.CharField(max_length=200, blank=True, null=True)  # Amenities offered\n    description = models.TextField(blank=True, null=True)  \n    availability = models.CharField(max_length=20, blank=True, null=True)  # Availability status\n    capacity = models.IntegerField(blank=True, null=True)  # Number of rooms available",
        "detail": "backend.hostelhq.models",
        "documentation": {}
    },
    {
        "label": "Image",
        "kind": 6,
        "importPath": "backend.hostelhq.models",
        "description": "backend.hostelhq.models",
        "peekOfCode": "class Image(models.Model):\n    image = models.ImageField(upload_to='images/')\n    uploaded_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"{self.image}\"\nclass TourRequests(models.Model):\n    client = models.ForeignKey(UserProfile, on_delete=models.CASCADE, related_name='client_requests')\n    hostel = models.ForeignKey(AgentListing, on_delete=models.CASCADE)\n    requested_date = models.DateField(default=None, blank=True, null=True)\n    status = models.CharField(max_length=10, )",
        "detail": "backend.hostelhq.models",
        "documentation": {}
    },
    {
        "label": "TourRequests",
        "kind": 6,
        "importPath": "backend.hostelhq.models",
        "description": "backend.hostelhq.models",
        "peekOfCode": "class TourRequests(models.Model):\n    client = models.ForeignKey(UserProfile, on_delete=models.CASCADE, related_name='client_requests')\n    hostel = models.ForeignKey(AgentListing, on_delete=models.CASCADE)\n    requested_date = models.DateField(default=None, blank=True, null=True)\n    status = models.CharField(max_length=10, )\n    def __str__(self):\n        return f\"Tour request by {self.client.email} for {self.hostel.hostelName}\"",
        "detail": "backend.hostelhq.models",
        "documentation": {}
    },
    {
        "label": "UserProfileSerializer",
        "kind": 6,
        "importPath": "backend.hostelhq.serializers",
        "description": "backend.hostelhq.serializers",
        "peekOfCode": "class UserProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserProfile\n        fields = \"__all__\"\nclass ImageSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Image\n        fields = ['id', 'image', 'uploaded_at']\nclass AgentListingSerializer(serializers.ModelSerializer):\n    images = ImageSerializer(many=True, required=False)",
        "detail": "backend.hostelhq.serializers",
        "documentation": {}
    },
    {
        "label": "ImageSerializer",
        "kind": 6,
        "importPath": "backend.hostelhq.serializers",
        "description": "backend.hostelhq.serializers",
        "peekOfCode": "class ImageSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Image\n        fields = ['id', 'image', 'uploaded_at']\nclass AgentListingSerializer(serializers.ModelSerializer):\n    images = ImageSerializer(many=True, required=False)\n    class Meta:\n        model = AgentListing\n        fields = \"__all__\"\n        extra_kwargs = {",
        "detail": "backend.hostelhq.serializers",
        "documentation": {}
    },
    {
        "label": "AgentListingSerializer",
        "kind": 6,
        "importPath": "backend.hostelhq.serializers",
        "description": "backend.hostelhq.serializers",
        "peekOfCode": "class AgentListingSerializer(serializers.ModelSerializer):\n    images = ImageSerializer(many=True, required=False)\n    class Meta:\n        model = AgentListing\n        fields = \"__all__\"\n        extra_kwargs = {\n            'hostelName': {'required': False, 'allow_blank': True},\n            'address': {'required': False, 'allow_blank': True},\n            'description': {'required': False, 'allow_blank': True},\n            'amenities': {'required': False, 'allow_blank': True},",
        "detail": "backend.hostelhq.serializers",
        "documentation": {}
    },
    {
        "label": "TourRequestsSerializer",
        "kind": 6,
        "importPath": "backend.hostelhq.serializers",
        "description": "backend.hostelhq.serializers",
        "peekOfCode": "class TourRequestsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TourRequests\n        fields = ['id', 'requested_date', 'hostel', 'client']",
        "detail": "backend.hostelhq.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.hostelhq.urls",
        "description": "backend.hostelhq.urls",
        "peekOfCode": "urlpatterns = [\n    # User profile\n    path('authenticate/', authenticate_user, name='authenticate_user'),\n    path('create-or-update-profile/', create_or_update_profile, name='create_or_update_profile'),\n    # Agent Listings\n    path('agent-listings/', AgentListingListView.as_view(), name='agent-listing-list'),  # GET for listing\n    path('agent-listings/create/', AgentListingCreateView.as_view(), name='agent-listing-create'),  # POST for creation\n    path('agent-listings/<int:pk>/', AgentListingDetailView.as_view(), name='agent-listing-detail'),  # GET, PUT, DELETE for detail\n    # Image uploads\n    path('upload-images/', ImageUploadView.as_view(), name='upload-images'),",
        "detail": "backend.hostelhq.urls",
        "documentation": {}
    },
    {
        "label": "AgentListingCreateView",
        "kind": 6,
        "importPath": "backend.hostelhq.views",
        "description": "backend.hostelhq.views",
        "peekOfCode": "class AgentListingCreateView(generics.CreateAPIView):\n    serializer_class = AgentListingSerializer\n    parser_classes = (MultiPartParser, FormParser)\n    #permission_classes = [IsAuthenticated]\n    def perform_create(self, serializer):\n        token = self.request.data.get('token')\n        if not token:\n            raise serializers.ValidationError({'error': 'Token is required'})\n        try:\n            decoded_token = auth.verify_id_token(token)",
        "detail": "backend.hostelhq.views",
        "documentation": {}
    },
    {
        "label": "AgentListingListView",
        "kind": 6,
        "importPath": "backend.hostelhq.views",
        "description": "backend.hostelhq.views",
        "peekOfCode": "class AgentListingListView(generics.ListAPIView):\n    queryset = AgentListing.objects.all()\n    serializer_class = AgentListingSerializer\nclass AgentListingDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = AgentListing.objects.all()\n    serializer_class = AgentListingSerializer\n    #permission_classes = [IsAuthenticated]\nclass ImageUploadView(generics.CreateAPIView):\n    serializer_class = ImageSerializer\n    parser_classes = (MultiPartParser, FormParser)",
        "detail": "backend.hostelhq.views",
        "documentation": {}
    },
    {
        "label": "AgentListingDetailView",
        "kind": 6,
        "importPath": "backend.hostelhq.views",
        "description": "backend.hostelhq.views",
        "peekOfCode": "class AgentListingDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = AgentListing.objects.all()\n    serializer_class = AgentListingSerializer\n    #permission_classes = [IsAuthenticated]\nclass ImageUploadView(generics.CreateAPIView):\n    serializer_class = ImageSerializer\n    parser_classes = (MultiPartParser, FormParser)\n    # No permission_classes needed\n    def post(self, request, *args, **kwargs):\n        images = request.FILES.getlist('images')",
        "detail": "backend.hostelhq.views",
        "documentation": {}
    },
    {
        "label": "ImageUploadView",
        "kind": 6,
        "importPath": "backend.hostelhq.views",
        "description": "backend.hostelhq.views",
        "peekOfCode": "class ImageUploadView(generics.CreateAPIView):\n    serializer_class = ImageSerializer\n    parser_classes = (MultiPartParser, FormParser)\n    # No permission_classes needed\n    def post(self, request, *args, **kwargs):\n        images = request.FILES.getlist('images')\n        if not images:\n            return Response({'error': 'No images provided'}, status=status.HTTP_400_BAD_REQUEST)\n        # Process each image\n        image_objects = []",
        "detail": "backend.hostelhq.views",
        "documentation": {}
    },
    {
        "label": "TourRequestCreateView",
        "kind": 6,
        "importPath": "backend.hostelhq.views",
        "description": "backend.hostelhq.views",
        "peekOfCode": "class TourRequestCreateView(generics.CreateAPIView):\n    serializer_class = TourRequestsSerializer\n    #permission_classes = [IsAuthenticated]  # Ensure user is authenticated\n    def post(self, request, *args, **kwargs):\n        try:\n            # Get the token from request data\n            token = request.data.get('token')\n            if not token:\n                return Response({'error': 'Token is required'}, status=status.HTTP_400_BAD_REQUEST)\n            # Verify the token",
        "detail": "backend.hostelhq.views",
        "documentation": {}
    },
    {
        "label": "TourRequestListView",
        "kind": 6,
        "importPath": "backend.hostelhq.views",
        "description": "backend.hostelhq.views",
        "peekOfCode": "class TourRequestListView(generics.ListAPIView):\n    serializer_class = TourRequestsSerializer\n    #permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        return TourRequests.objects.filter(client=user)\nclass TourRequestUpdateView(generics.UpdateAPIView):\n    serializer_class = TourRequestsSerializer\n    #permission_classes = [IsAuthenticated]\n    def get_queryset(self):",
        "detail": "backend.hostelhq.views",
        "documentation": {}
    },
    {
        "label": "TourRequestUpdateView",
        "kind": 6,
        "importPath": "backend.hostelhq.views",
        "description": "backend.hostelhq.views",
        "peekOfCode": "class TourRequestUpdateView(generics.UpdateAPIView):\n    serializer_class = TourRequestsSerializer\n    #permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        return TourRequests.objects.filter(client=user)",
        "detail": "backend.hostelhq.views",
        "documentation": {}
    },
    {
        "label": "create_or_update_profile",
        "kind": 2,
        "importPath": "backend.hostelhq.views",
        "description": "backend.hostelhq.views",
        "peekOfCode": "def create_or_update_profile(request):\n    try:\n        data = request.data\n        token = data.get('token')\n        if not token:\n            return Response({'error': 'Token is required'}, status=status.HTTP_400_BAD_REQUEST)\n        # Verify the token\n        decoded_token = auth.verify_id_token(token)\n        uid = decoded_token['uid']\n        email = decoded_token.get('email', '')",
        "detail": "backend.hostelhq.views",
        "documentation": {}
    },
    {
        "label": "authenticate_user",
        "kind": 2,
        "importPath": "backend.hostelhq.views",
        "description": "backend.hostelhq.views",
        "peekOfCode": "def authenticate_user(request):\n    try:\n        data = request.data\n        token = data.get('token')\n        if not token:\n            return Response({'error': 'Token is required'}, status=status.HTTP_400_BAD_REQUEST)\n        # Verify the token\n        decoded_token = auth.verify_id_token(token)\n        uid = decoded_token['uid']\n        email = decoded_token.get('email', '')",
        "detail": "backend.hostelhq.views",
        "documentation": {}
    },
    {
        "label": "add_or_update_hostels",
        "kind": 2,
        "importPath": "backend.hostelhq.views",
        "description": "backend.hostelhq.views",
        "peekOfCode": "def add_or_update_hostels(request):\n    try:\n        data = request.data\n        token = data.get('token')\n        if not token:\n            return Response({'error': 'Token is required'}, status=status.HTTP_400_BAD_REQUEST)\n        # Verify the token\n        decoded_token = auth.verify_id_token(token)\n        uid = decoded_token['uid']\n        # Assuming you have a separate model for hostel listings",
        "detail": "backend.hostelhq.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.manage",
        "description": "backend.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "backend.manage",
        "documentation": {}
    },
    {
        "label": "pdf_text",
        "kind": 5,
        "importPath": "backend.pdfextract",
        "description": "backend.pdfextract",
        "peekOfCode": "pdf_text = \"\"\nwith pdfplumber.open('Mobile_Application_Architectures.pdf') as pdf:\n    for page in pdf.pages:\n        pdf_text += page.extract_text() or \"\"\n# Extract tables using tabula\ntables = tabula.read_pdf('Mobile_Application_Architectures.pdf', pages='all', multiple_tables=True)\n# Save extracted text to a CSV file\ntext_file_path = 'extracted_tessxt.csv'\nwith open(text_file_path, 'w', newline='', encoding='utf-8') as text_file:\n    text_file.write(pdf_text)",
        "detail": "backend.pdfextract",
        "documentation": {}
    },
    {
        "label": "tables",
        "kind": 5,
        "importPath": "backend.pdfextract",
        "description": "backend.pdfextract",
        "peekOfCode": "tables = tabula.read_pdf('Mobile_Application_Architectures.pdf', pages='all', multiple_tables=True)\n# Save extracted text to a CSV file\ntext_file_path = 'extracted_tessxt.csv'\nwith open(text_file_path, 'w', newline='', encoding='utf-8') as text_file:\n    text_file.write(pdf_text)\n# Save tables to separate CSV files\nfor i, table in enumerate(tables):\n    table_file_path = f'table_{i}.csv'\n    table.to_csv(table_file_path, index=False)\nprint(f\"Text saved to {text_file_path}\")",
        "detail": "backend.pdfextract",
        "documentation": {}
    },
    {
        "label": "text_file_path",
        "kind": 5,
        "importPath": "backend.pdfextract",
        "description": "backend.pdfextract",
        "peekOfCode": "text_file_path = 'extracted_tessxt.csv'\nwith open(text_file_path, 'w', newline='', encoding='utf-8') as text_file:\n    text_file.write(pdf_text)\n# Save tables to separate CSV files\nfor i, table in enumerate(tables):\n    table_file_path = f'table_{i}.csv'\n    table.to_csv(table_file_path, index=False)\nprint(f\"Text saved to {text_file_path}\")\nprint(f\"Tables saved to table_0.csv, table_1.csv, ...\")\n\"\"\"import pdfplumber",
        "detail": "backend.pdfextract",
        "documentation": {}
    },
    {
        "label": "df_combined",
        "kind": 5,
        "importPath": "backend.pdfextract",
        "description": "backend.pdfextract",
        "peekOfCode": "df_combined = pd.DataFrame(rows)\ndf_combined.to_csv('output.csv', index=False, header=False)\n\"\"\"",
        "detail": "backend.pdfextract",
        "documentation": {}
    }
]