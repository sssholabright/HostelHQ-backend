[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "nltk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk",
        "description": "nltk",
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "spacy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "spacy",
        "description": "spacy",
        "detail": "spacy",
        "documentation": {}
    },
    {
        "label": "Example",
        "importPath": "spacy.training",
        "description": "spacy.training",
        "isExtraImport": true,
        "detail": "spacy.training",
        "documentation": {}
    },
    {
        "label": "Example",
        "importPath": "spacy.training",
        "description": "spacy.training",
        "isExtraImport": true,
        "detail": "spacy.training",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "spacy.pipeline.textcat",
        "description": "spacy.pipeline.textcat",
        "isExtraImport": true,
        "detail": "spacy.pipeline.textcat",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "spacy.pipeline.textcat",
        "description": "spacy.pipeline.textcat",
        "isExtraImport": true,
        "detail": "spacy.pipeline.textcat",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "word_tokenize",
        "importPath": "nltk.tokenize",
        "description": "nltk.tokenize",
        "isExtraImport": true,
        "detail": "nltk.tokenize",
        "documentation": {}
    },
    {
        "label": "stopwords",
        "importPath": "nltk.corpus",
        "description": "nltk.corpus",
        "isExtraImport": true,
        "detail": "nltk.corpus",
        "documentation": {}
    },
    {
        "label": "WordNetLemmatizer",
        "importPath": "nltk.stem",
        "description": "nltk.stem",
        "isExtraImport": true,
        "detail": "nltk.stem",
        "documentation": {}
    },
    {
        "label": "TextBlob",
        "importPath": "textblob",
        "description": "textblob",
        "isExtraImport": true,
        "detail": "textblob",
        "documentation": {}
    },
    {
        "label": "TfidfVectorizer",
        "importPath": "sklearn.feature_extraction.text",
        "description": "sklearn.feature_extraction.text",
        "isExtraImport": true,
        "detail": "sklearn.feature_extraction.text",
        "documentation": {}
    },
    {
        "label": "SVC",
        "importPath": "sklearn.svm",
        "description": "sklearn.svm",
        "isExtraImport": true,
        "detail": "sklearn.svm",
        "documentation": {}
    },
    {
        "label": "make_pipeline",
        "importPath": "sklearn.pipeline",
        "description": "sklearn.pipeline",
        "isExtraImport": true,
        "detail": "sklearn.pipeline",
        "documentation": {}
    },
    {
        "label": "joblib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "joblib",
        "description": "joblib",
        "detail": "joblib",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "EmailValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairSerializer",
        "importPath": "rest_framework_simplejwt.serializers",
        "description": "rest_framework_simplejwt.serializers",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.serializers",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "firebase_admin",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "credentials",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "pdfplumber",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pdfplumber",
        "description": "pdfplumber",
        "detail": "pdfplumber",
        "documentation": {}
    },
    {
        "label": "tabula",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tabula",
        "description": "tabula",
        "detail": "tabula",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.asgi",
        "description": "AIgenerator.AIgenerator.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "AIgenerator.AIgenerator.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-%yo)wsu$ooy9_o0=_9xfzpo-pj_%p+&*9ji09x02#^e%u6p1mp'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-%yo)wsu$ooy9_o0=_9xfzpo-pj_%p+&*9ji09x02#^e%u6p1mp'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'chatbot',",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'chatbot',\n]\nMIDDLEWARE = [",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nEMAIL_HOST = 'imap.gmail.com'",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "EMAIL_HOST = 'imap.gmail.com'\nEMAIL_PORT = 993\nEMAIL_USE_SSL = True\nEMAIL_HOST_USER = 'brightprogrammer1@gmail.com'\nEMAIL_HOST_PASSWORD = 'wqaebpabbptxyius'\nEMAIL_USE_TLS = False\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "EMAIL_PORT = 993\nEMAIL_USE_SSL = True\nEMAIL_HOST_USER = 'brightprogrammer1@gmail.com'\nEMAIL_HOST_PASSWORD = 'wqaebpabbptxyius'\nEMAIL_USE_TLS = False\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'brightprogrammer1@gmail.com'",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_SSL",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "EMAIL_USE_SSL = True\nEMAIL_HOST_USER = 'brightprogrammer1@gmail.com'\nEMAIL_HOST_PASSWORD = 'wqaebpabbptxyius'\nEMAIL_USE_TLS = False\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'brightprogrammer1@gmail.com'\nEMAIL_HOST_PASSWORD = 'wqaebpabbptxyius'",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "EMAIL_HOST_USER = 'brightprogrammer1@gmail.com'\nEMAIL_HOST_PASSWORD = 'wqaebpabbptxyius'\nEMAIL_USE_TLS = False\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'brightprogrammer1@gmail.com'\nEMAIL_HOST_PASSWORD = 'wqaebpabbptxyius'\nEMAIL_USE_SSL = False",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = 'wqaebpabbptxyius'\nEMAIL_USE_TLS = False\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'brightprogrammer1@gmail.com'\nEMAIL_HOST_PASSWORD = 'wqaebpabbptxyius'\nEMAIL_USE_SSL = False\nROOT_URLCONF = 'AIgenerator.urls'",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "EMAIL_USE_TLS = False\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'brightprogrammer1@gmail.com'\nEMAIL_HOST_PASSWORD = 'wqaebpabbptxyius'\nEMAIL_USE_SSL = False\nROOT_URLCONF = 'AIgenerator.urls'\nTEMPLATES = [",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'brightprogrammer1@gmail.com'\nEMAIL_HOST_PASSWORD = 'wqaebpabbptxyius'\nEMAIL_USE_SSL = False\nROOT_URLCONF = 'AIgenerator.urls'\nTEMPLATES = [\n    {",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "EMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'brightprogrammer1@gmail.com'\nEMAIL_HOST_PASSWORD = 'wqaebpabbptxyius'\nEMAIL_USE_SSL = False\nROOT_URLCONF = 'AIgenerator.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'brightprogrammer1@gmail.com'\nEMAIL_HOST_PASSWORD = 'wqaebpabbptxyius'\nEMAIL_USE_SSL = False\nROOT_URLCONF = 'AIgenerator.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'brightprogrammer1@gmail.com'\nEMAIL_HOST_PASSWORD = 'wqaebpabbptxyius'\nEMAIL_USE_SSL = False\nROOT_URLCONF = 'AIgenerator.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "EMAIL_HOST_USER = 'brightprogrammer1@gmail.com'\nEMAIL_HOST_PASSWORD = 'wqaebpabbptxyius'\nEMAIL_USE_SSL = False\nROOT_URLCONF = 'AIgenerator.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = 'wqaebpabbptxyius'\nEMAIL_USE_SSL = False\nROOT_URLCONF = 'AIgenerator.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_SSL",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "EMAIL_USE_SSL = False\nROOT_URLCONF = 'AIgenerator.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "ROOT_URLCONF = 'AIgenerator.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "WSGI_APPLICATION = 'AIgenerator.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.settings",
        "description": "AIgenerator.AIgenerator.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "AIgenerator.AIgenerator.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.urls",
        "description": "AIgenerator.AIgenerator.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot.urls'))\n]",
        "detail": "AIgenerator.AIgenerator.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "AIgenerator.AIgenerator.wsgi",
        "description": "AIgenerator.AIgenerator.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "AIgenerator.AIgenerator.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "AIgenerator.chatbot.migrations.0001_initial",
        "description": "AIgenerator.chatbot.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ChatHistory',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('user_message', models.TextField()),",
        "detail": "AIgenerator.chatbot.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "AIgenerator.chatbot.migrations.0002_rename_bot_response_chathistory_answer_and_more",
        "description": "AIgenerator.chatbot.migrations.0002_rename_bot_response_chathistory_answer_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('chatbot', '0001_initial'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='chathistory',\n            old_name='bot_response',\n            new_name='answer',\n        ),",
        "detail": "AIgenerator.chatbot.migrations.0002_rename_bot_response_chathistory_answer_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "AIgenerator.chatbot.migrations.0003_userquery_delete_chathistory",
        "description": "AIgenerator.chatbot.migrations.0003_userquery_delete_chathistory",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('chatbot', '0002_rename_bot_response_chathistory_answer_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserQuery',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('query_text', models.TextField()),",
        "detail": "AIgenerator.chatbot.migrations.0003_userquery_delete_chathistory",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "AIgenerator.chatbot.migrations.0004_faq_delete_userquery",
        "description": "AIgenerator.chatbot.migrations.0004_faq_delete_userquery",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('chatbot', '0003_userquery_delete_chathistory'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='FAQ',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('question', models.CharField(max_length=255)),",
        "detail": "AIgenerator.chatbot.migrations.0004_faq_delete_userquery",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "AIgenerator.chatbot.migrations.0005_alter_faq_question",
        "description": "AIgenerator.chatbot.migrations.0005_alter_faq_question",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('chatbot', '0004_faq_delete_userquery'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='faq',\n            name='question',\n            field=models.TextField(),\n        ),",
        "detail": "AIgenerator.chatbot.migrations.0005_alter_faq_question",
        "documentation": {}
    },
    {
        "label": "ChatbotConfig",
        "kind": 6,
        "importPath": "AIgenerator.chatbot.apps",
        "description": "AIgenerator.chatbot.apps",
        "peekOfCode": "class ChatbotConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'chatbot'",
        "detail": "AIgenerator.chatbot.apps",
        "documentation": {}
    },
    {
        "label": "predict_intent",
        "kind": 2,
        "importPath": "AIgenerator.chatbot.nltk_setup",
        "description": "AIgenerator.chatbot.nltk_setup",
        "peekOfCode": "def predict_intent(text):\n    doc = nlp(text)\n    intent = doc.cats\n    return max(intent, key=intent.get)\n# Test the model\nprint(predict_intent(\"How can I get my CMR certificate?\"))",
        "detail": "AIgenerator.chatbot.nltk_setup",
        "documentation": {}
    },
    {
        "label": "nlp",
        "kind": 5,
        "importPath": "AIgenerator.chatbot.nltk_setup",
        "description": "AIgenerator.chatbot.nltk_setup",
        "peekOfCode": "nlp = spacy.load(\"intent_model\")\ndef predict_intent(text):\n    doc = nlp(text)\n    intent = doc.cats\n    return max(intent, key=intent.get)\n# Test the model\nprint(predict_intent(\"How can I get my CMR certificate?\"))",
        "detail": "AIgenerator.chatbot.nltk_setup",
        "documentation": {}
    },
    {
        "label": "nlp",
        "kind": 5,
        "importPath": "AIgenerator.chatbot.tests",
        "description": "AIgenerator.chatbot.tests",
        "peekOfCode": "nlp = spacy.load('en_core_web_sm')\n# Add TextCategorizer to the pipeline\nif 'textcat' not in nlp.pipe_names:\n    text_cat = nlp.add_pipe('textcat', last=True)\nelse:\n    text_cat = nlp.get_pipe('textcat')\n# Add labels to the TextCategorizer\ntext_cat.add_label(\"greeting\")\ntext_cat.add_label(\"cmr_certificate_status\")\ntext_cat.add_label(\"change_request\")",
        "detail": "AIgenerator.chatbot.tests",
        "documentation": {}
    },
    {
        "label": "train_data",
        "kind": 5,
        "importPath": "AIgenerator.chatbot.tests",
        "description": "AIgenerator.chatbot.tests",
        "peekOfCode": "train_data = []\nfor intent in intents:\n    for pattern in intent['patterns']:\n        train_data.append((pattern, {\"cats\": {intent['intent']: 1.0}}))\n# Convert data for training\ntrain_data = [(nlp.make_doc(text), annotations) for text, annotations in train_data]\n# Train the model\nnlp.begin_training()\nfor epoch in range(10):\n    losses = {}",
        "detail": "AIgenerator.chatbot.tests",
        "documentation": {}
    },
    {
        "label": "train_data",
        "kind": 5,
        "importPath": "AIgenerator.chatbot.tests",
        "description": "AIgenerator.chatbot.tests",
        "peekOfCode": "train_data = [(nlp.make_doc(text), annotations) for text, annotations in train_data]\n# Train the model\nnlp.begin_training()\nfor epoch in range(10):\n    losses = {}\n    for doc, annotations in train_data:\n        example = Example.from_dict(doc, annotations)\n        nlp.update([example], drop=0.5, losses=losses)\n    print(losses)\n# Save the trained model",
        "detail": "AIgenerator.chatbot.tests",
        "documentation": {}
    },
    {
        "label": "nlp",
        "kind": 5,
        "importPath": "AIgenerator.chatbot.train_model",
        "description": "AIgenerator.chatbot.train_model",
        "peekOfCode": "nlp = spacy.load('en_core_web_sm')\n# Check if the tagger is in the pipeline\nif 'tagger' not in nlp.pipe_names:\n    print(\"Adding 'tagger' to the pipeline.\")\n    nlp.add_pipe('tagger', before='parser')\n# Add the TextCategorizer component to the pipeline if it doesn't exist\nif 'textcat' not in nlp.pipe_names:\n    text_cat = nlp.add_pipe('textcat', last=True)\nelse:\n    text_cat = nlp.get_pipe('textcat')",
        "detail": "AIgenerator.chatbot.train_model",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "AIgenerator.chatbot.train_model",
        "description": "AIgenerator.chatbot.train_model",
        "peekOfCode": "data = [\n    {\"intent\": \"greeting\", \"patterns\": [\"Hello\", \"Hi\", \"Good morning\", \"Good evening\"]},\n    {\"intent\": \"cmr_certificate_status\", \"patterns\": [\"How can I get my CMR certificate?\", \"What if I haven't received my CMR certificate?\"]},\n    {\"intent\": \"change_request\", \"patterns\": [\"How can I request changes to my CMR certificate?\", \"How do I update my CMR certificate details?\"]}\n]\ntrain_data = []\nfor intent in data:\n    for pattern in intent['patterns']:\n        train_data.append((pattern, {\"cats\": {intent['intent']: 1.0}}))\n# Split data",
        "detail": "AIgenerator.chatbot.train_model",
        "documentation": {}
    },
    {
        "label": "train_data",
        "kind": 5,
        "importPath": "AIgenerator.chatbot.train_model",
        "description": "AIgenerator.chatbot.train_model",
        "peekOfCode": "train_data = []\nfor intent in data:\n    for pattern in intent['patterns']:\n        train_data.append((pattern, {\"cats\": {intent['intent']: 1.0}}))\n# Split data\ntrain_data = [(nlp.make_doc(text), annotations) for text, annotations in train_data]\n# Training the model\nnlp.begin_training()\nfor epoch in range(10):\n    losses = {}",
        "detail": "AIgenerator.chatbot.train_model",
        "documentation": {}
    },
    {
        "label": "train_data",
        "kind": 5,
        "importPath": "AIgenerator.chatbot.train_model",
        "description": "AIgenerator.chatbot.train_model",
        "peekOfCode": "train_data = [(nlp.make_doc(text), annotations) for text, annotations in train_data]\n# Training the model\nnlp.begin_training()\nfor epoch in range(10):\n    losses = {}\n    for doc, annotations in train_data:\n        example = Example.from_dict(doc, annotations)\n        nlp.update([example], drop=0.5, losses=losses)\n    print(losses)\n# Save the model",
        "detail": "AIgenerator.chatbot.train_model",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "AIgenerator.chatbot.urls",
        "description": "AIgenerator.chatbot.urls",
        "peekOfCode": "urlpatterns = [\n    path('chat/', ChatView.as_view(), name='chat'),\n    path('', IndexView.as_view(), name='index'),  # Route for the HTML page\n]",
        "detail": "AIgenerator.chatbot.urls",
        "documentation": {}
    },
    {
        "label": "preprocess",
        "kind": 2,
        "importPath": "AIgenerator.chatbot.utils",
        "description": "AIgenerator.chatbot.utils",
        "peekOfCode": "def preprocess(text):\n    tokens = word_tokenize(text.lower())\n    tokens = [token for token in tokens if token.isalnum()]\n    tokens = [token for token in tokens if token not in stopwords.words('english')]\n    lemmatizer = WordNetLemmatizer()\n    tokens = [lemmatizer.lemmatize(token) for token in tokens]\n    return ' '.join(tokens)\n# Sentiment Analysis function\ndef analyze_sentiment(text):\n    blob = TextBlob(text)",
        "detail": "AIgenerator.chatbot.utils",
        "documentation": {}
    },
    {
        "label": "analyze_sentiment",
        "kind": 2,
        "importPath": "AIgenerator.chatbot.utils",
        "description": "AIgenerator.chatbot.utils",
        "peekOfCode": "def analyze_sentiment(text):\n    blob = TextBlob(text)\n    return blob.sentiment.polarity  # Returns sentiment polarity (-1 to 1)\n# Train the model\ndef train_model():\n    vectorizer = TfidfVectorizer(ngram_range=(1, 2))\n    model = SVC(kernel='linear')\n    pipeline = make_pipeline(vectorizer, model)\n    questions = [q for entry in faq_entries for q in entry['question']]\n    answers = [entry['answer'] for entry in faq_entries for _ in entry['question']]",
        "detail": "AIgenerator.chatbot.utils",
        "documentation": {}
    },
    {
        "label": "train_model",
        "kind": 2,
        "importPath": "AIgenerator.chatbot.utils",
        "description": "AIgenerator.chatbot.utils",
        "peekOfCode": "def train_model():\n    vectorizer = TfidfVectorizer(ngram_range=(1, 2))\n    model = SVC(kernel='linear')\n    pipeline = make_pipeline(vectorizer, model)\n    questions = [q for entry in faq_entries for q in entry['question']]\n    answers = [entry['answer'] for entry in faq_entries for _ in entry['question']]\n    processed_questions = [preprocess(q) for q in questions]\n    X = processed_questions\n    y = answers\n    print(f\"Training with {len(X)} questions\")",
        "detail": "AIgenerator.chatbot.utils",
        "documentation": {}
    },
    {
        "label": "load_model",
        "kind": 2,
        "importPath": "AIgenerator.chatbot.utils",
        "description": "AIgenerator.chatbot.utils",
        "peekOfCode": "def load_model():\n    return joblib.load('chat_model.pkl')\n# Use pre-trained model or train a new one\ntry:\n    chat_model = load_model()\nexcept FileNotFoundError:\n    train_model()\n    chat_model = load_model()\n# Match FAQ\ndef match_faq(question):",
        "detail": "AIgenerator.chatbot.utils",
        "documentation": {}
    },
    {
        "label": "match_faq",
        "kind": 2,
        "importPath": "AIgenerator.chatbot.utils",
        "description": "AIgenerator.chatbot.utils",
        "peekOfCode": "def match_faq(question):\n    processed_question = preprocess(question)\n    print(f\"Processed question: {processed_question}\")\n    response = chat_model.predict([processed_question])[0]\n    return response\n# Example usage\nif __name__ == \"__main__\":\n    test_question = \"How can I get my CMR certificate if I haven't received it yet?\"\n    sentiment = analyze_sentiment(test_question)\n    response = match_faq(test_question)",
        "detail": "AIgenerator.chatbot.utils",
        "documentation": {}
    },
    {
        "label": "faq_entries",
        "kind": 5,
        "importPath": "AIgenerator.chatbot.utils",
        "description": "AIgenerator.chatbot.utils",
        "peekOfCode": "faq_entries = faq_data\n# Preprocess function\ndef preprocess(text):\n    tokens = word_tokenize(text.lower())\n    tokens = [token for token in tokens if token.isalnum()]\n    tokens = [token for token in tokens if token not in stopwords.words('english')]\n    lemmatizer = WordNetLemmatizer()\n    tokens = [lemmatizer.lemmatize(token) for token in tokens]\n    return ' '.join(tokens)\n# Sentiment Analysis function",
        "detail": "AIgenerator.chatbot.utils",
        "documentation": {}
    },
    {
        "label": "ChatView",
        "kind": 6,
        "importPath": "AIgenerator.chatbot.views",
        "description": "AIgenerator.chatbot.views",
        "peekOfCode": "class ChatView(View):\n    @csrf_exempt\n    def dispatch(self, *args, **kwargs):\n        return super().dispatch(*args, **kwargs)\n    def post(self, request, *args, **kwargs):\n        try:\n            data = json.loads(request.body.decode('utf-8'))\n            message = data['message']\n            # Process the message\n            response = match_faq(message)",
        "detail": "AIgenerator.chatbot.views",
        "documentation": {}
    },
    {
        "label": "IndexView",
        "kind": 6,
        "importPath": "AIgenerator.chatbot.views",
        "description": "AIgenerator.chatbot.views",
        "peekOfCode": "class IndexView(View):\n    def get(self, request, *args, **kwargs):\n        return render(request, 'chatbot/chat.html')",
        "detail": "AIgenerator.chatbot.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "AIgenerator.manage",
        "description": "AIgenerator.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'AIgenerator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "AIgenerator.manage",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.AgentBackend.migrations.0001_initial",
        "description": "backend.AgentBackend.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AgentProfile',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "backend.AgentBackend.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.AgentBackend.migrations.0002_agentprofile_is_verified",
        "description": "backend.AgentBackend.migrations.0002_agentprofile_is_verified",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('AgentBackend', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='agentprofile',\n            name='is_verified',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "backend.AgentBackend.migrations.0002_agentprofile_is_verified",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.AgentBackend.migrations.0003_customuser_delete_agentprofile",
        "description": "backend.AgentBackend.migrations.0003_customuser_delete_agentprofile",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('AgentBackend', '0002_agentprofile_is_verified'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CustomUser',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('password', models.CharField(max_length=128, verbose_name='password')),",
        "detail": "backend.AgentBackend.migrations.0003_customuser_delete_agentprofile",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.AgentBackend.migrations.0004_customuser_groups_customuser_is_superuser_and_more",
        "description": "backend.AgentBackend.migrations.0004_customuser_groups_customuser_is_superuser_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('AgentBackend', '0003_customuser_delete_agentprofile'),\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='customuser',\n            name='groups',\n            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),",
        "detail": "backend.AgentBackend.migrations.0004_customuser_groups_customuser_is_superuser_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.AgentBackend.migrations.0005_alter_customuser_id",
        "description": "backend.AgentBackend.migrations.0005_alter_customuser_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('AgentBackend', '0004_customuser_groups_customuser_is_superuser_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='customuser',\n            name='id',\n            field=models.AutoField(primary_key=True, serialize=False),\n        ),",
        "detail": "backend.AgentBackend.migrations.0005_alter_customuser_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.AgentBackend.migrations.0006_user_guest_agent_delete_customuser",
        "description": "backend.AgentBackend.migrations.0006_user_guest_agent_delete_customuser",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('AgentBackend', '0005_alter_customuser_id'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('password', models.CharField(max_length=128, verbose_name='password')),",
        "detail": "backend.AgentBackend.migrations.0006_user_guest_agent_delete_customuser",
        "documentation": {}
    },
    {
        "label": "CustomUserAdmin",
        "kind": 6,
        "importPath": "backend.AgentBackend.admin",
        "description": "backend.AgentBackend.admin",
        "peekOfCode": "class CustomUserAdmin(admin.ModelAdmin):\n    list_display = ('email', 'first_name', 'last_name', 'is_active', 'is_staff', 'is_agent', 'is_guest')\n    search_fields = ('email', 'first_name', 'last_name')\n    readonly_fields = ('date_joined',)\nclass AgentAdmin(admin.ModelAdmin):\n    list_display = ('user', )\n    search_fields = ('user__email', )\nclass GuestAdmin(admin.ModelAdmin):\n    list_display = ('user', 'phone_number', )\n    search_fields = ('user__email', 'phone_number')",
        "detail": "backend.AgentBackend.admin",
        "documentation": {}
    },
    {
        "label": "AgentAdmin",
        "kind": 6,
        "importPath": "backend.AgentBackend.admin",
        "description": "backend.AgentBackend.admin",
        "peekOfCode": "class AgentAdmin(admin.ModelAdmin):\n    list_display = ('user', )\n    search_fields = ('user__email', )\nclass GuestAdmin(admin.ModelAdmin):\n    list_display = ('user', 'phone_number', )\n    search_fields = ('user__email', 'phone_number')\nadmin.site.register(User, CustomUserAdmin)\nadmin.site.register(Agent, AgentAdmin)\nadmin.site.register(Guest, GuestAdmin)",
        "detail": "backend.AgentBackend.admin",
        "documentation": {}
    },
    {
        "label": "GuestAdmin",
        "kind": 6,
        "importPath": "backend.AgentBackend.admin",
        "description": "backend.AgentBackend.admin",
        "peekOfCode": "class GuestAdmin(admin.ModelAdmin):\n    list_display = ('user', 'phone_number', )\n    search_fields = ('user__email', 'phone_number')\nadmin.site.register(User, CustomUserAdmin)\nadmin.site.register(Agent, AgentAdmin)\nadmin.site.register(Guest, GuestAdmin)",
        "detail": "backend.AgentBackend.admin",
        "documentation": {}
    },
    {
        "label": "AgentbackendConfig",
        "kind": 6,
        "importPath": "backend.AgentBackend.apps",
        "description": "backend.AgentBackend.apps",
        "peekOfCode": "class AgentbackendConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'AgentBackend'",
        "detail": "backend.AgentBackend.apps",
        "documentation": {}
    },
    {
        "label": "CustomUserManager",
        "kind": 6,
        "importPath": "backend.AgentBackend.models",
        "description": "backend.AgentBackend.models",
        "peekOfCode": "class CustomUserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        if not email:\n            raise ValueError('The Email field must be set')\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n    def create_superuser(self, email, password=None, **extra_fields):",
        "detail": "backend.AgentBackend.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.AgentBackend.models",
        "description": "backend.AgentBackend.models",
        "peekOfCode": "class User(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(unique=True, validators=[EmailValidator()])\n    first_name = models.CharField(max_length=30, blank=True)\n    last_name = models.CharField(max_length=30, blank=True)\n    is_superuser = models.BooleanField(default=False)\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n    is_agent = models.BooleanField(default=False)  # Agent flag\n    is_guest = models.BooleanField(default=False)  # Guest flag\n    date_joined = models.DateTimeField(default=timezone.now)",
        "detail": "backend.AgentBackend.models",
        "documentation": {}
    },
    {
        "label": "Agent",
        "kind": 6,
        "importPath": "backend.AgentBackend.models",
        "description": "backend.AgentBackend.models",
        "peekOfCode": "class Agent(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, limit_choices_to={'is_agent': True})\n    #business_name = models.CharField(max_length=100)\n    #business_registration_number = models.CharField(max_length=50)\n    #proof_of_ownership = models.FileField(upload_to='proof_of_ownership/', blank=True, null=True)\n    #additional_documents = models.FileField(upload_to='additional_documents/', blank=True, null=True)\n    def __str__(self):\n        return self.business_name\nclass Guest(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, limit_choices_to={'is_guest': True})",
        "detail": "backend.AgentBackend.models",
        "documentation": {}
    },
    {
        "label": "Guest",
        "kind": 6,
        "importPath": "backend.AgentBackend.models",
        "description": "backend.AgentBackend.models",
        "peekOfCode": "class Guest(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, limit_choices_to={'is_guest': True})\n    phone_number = models.CharField(max_length=15, blank=True)\n    def __str__(self):\n        return f'{self.user.email} - {self.phone_number}'",
        "detail": "backend.AgentBackend.models",
        "documentation": {}
    },
    {
        "label": "UserRegistrationSerializer",
        "kind": 6,
        "importPath": "backend.AgentBackend.serializers",
        "description": "backend.AgentBackend.serializers",
        "peekOfCode": "class UserRegistrationSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True)\n    password_confirm = serializers.CharField(write_only=True)\n    class Meta:\n        model = get_user_model()\n        fields = ['id', 'email', 'password', 'password_confirm']\n    def validate(self, attrs):\n        password = attrs.get('password')\n        password_confirm = attrs.get('password_confirm')\n        if password != password_confirm:",
        "detail": "backend.AgentBackend.serializers",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairSerializer",
        "kind": 6,
        "importPath": "backend.AgentBackend.serializers",
        "description": "backend.AgentBackend.serializers",
        "peekOfCode": "class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):\n    @classmethod\n    def get_token(cls, user):\n        token = super().get_token(user)\n        token['email'] = user.email\n        return token",
        "detail": "backend.AgentBackend.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.AgentBackend.urls",
        "description": "backend.AgentBackend.urls",
        "peekOfCode": "urlpatterns = [\n    path('register/', RegisterUserView.as_view(), name='register_user'),\n    path('login/', CustomTokenObtainPairView.as_view(), name='login_user'),\n    path('users/', UserListView.as_view(), name='users_list'),\n]",
        "detail": "backend.AgentBackend.urls",
        "documentation": {}
    },
    {
        "label": "send_verification_email",
        "kind": 2,
        "importPath": "backend.AgentBackend.utils",
        "description": "backend.AgentBackend.utils",
        "peekOfCode": "def send_verification_email(user_email, verification_link):\n    subject = 'Verify Your Email Address'\n    message = f'Please verify your email address by clicking the following link: {verification_link}'\n    send_mail(subject, message, settings.EMAIL_HOST_USER, [user_email])\ndef send_profile_update_notification(user_email):\n    subject = 'Profile Update Notification'\n    message = 'Your profile has been successfully updated.'\n    send_mail(subject, message, settings.EMAIL_HOST_USER, [user_email])",
        "detail": "backend.AgentBackend.utils",
        "documentation": {}
    },
    {
        "label": "send_profile_update_notification",
        "kind": 2,
        "importPath": "backend.AgentBackend.utils",
        "description": "backend.AgentBackend.utils",
        "peekOfCode": "def send_profile_update_notification(user_email):\n    subject = 'Profile Update Notification'\n    message = 'Your profile has been successfully updated.'\n    send_mail(subject, message, settings.EMAIL_HOST_USER, [user_email])",
        "detail": "backend.AgentBackend.utils",
        "documentation": {}
    },
    {
        "label": "RegisterUserView",
        "kind": 6,
        "importPath": "backend.AgentBackend.views",
        "description": "backend.AgentBackend.views",
        "peekOfCode": "class RegisterUserView(generics.CreateAPIView):\n    serializer_class = UserRegistrationSerializer\nclass CustomTokenObtainPairView(generics.GenericAPIView):\n    serializer_class = CustomTokenObtainPairSerializer\n    def post(self, request, *args, **kwargs):\n        email = request.data.get('email')\n        password = request.data.get('password')\n        user = authenticate(email=email, password=password)\n        if user is not None:\n            refresh = RefreshToken.for_user(user)",
        "detail": "backend.AgentBackend.views",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairView",
        "kind": 6,
        "importPath": "backend.AgentBackend.views",
        "description": "backend.AgentBackend.views",
        "peekOfCode": "class CustomTokenObtainPairView(generics.GenericAPIView):\n    serializer_class = CustomTokenObtainPairSerializer\n    def post(self, request, *args, **kwargs):\n        email = request.data.get('email')\n        password = request.data.get('password')\n        user = authenticate(email=email, password=password)\n        if user is not None:\n            refresh = RefreshToken.for_user(user)\n            return Response({\n                'access': str(refresh.access_token),",
        "detail": "backend.AgentBackend.views",
        "documentation": {}
    },
    {
        "label": "UserListView",
        "kind": 6,
        "importPath": "backend.AgentBackend.views",
        "description": "backend.AgentBackend.views",
        "peekOfCode": "class UserListView(generics.ListAPIView):\n    queryset = get_user_model().objects.all()\n    serializer_class = UserRegistrationSerializer",
        "detail": "backend.AgentBackend.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.backend.asgi",
        "description": "backend.backend.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "backend.backend.asgi",
        "documentation": {}
    },
    {
        "label": "FIREBASE_SERVICE_ACCOUNT_KEY",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "FIREBASE_SERVICE_ACCOUNT_KEY = 'backend/hostelhq-a2bae-firebase-adminsdk-cvepd-5ec032eb74.json'\n# Initialize Firebase Admin SDK\ncred = credentials.Certificate(FIREBASE_SERVICE_ACCOUNT_KEY)\nfirebase_admin.initialize_app(cred)\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-*@2l+^3a&bq0@8!*z_@p4jo2xnrsmzh^(l=ubzim%f8)wc^f3l'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "cred",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "cred = credentials.Certificate(FIREBASE_SERVICE_ACCOUNT_KEY)\nfirebase_admin.initialize_app(cred)\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-*@2l+^3a&bq0@8!*z_@p4jo2xnrsmzh^(l=ubzim%f8)wc^f3l'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-*@2l+^3a&bq0@8!*z_@p4jo2xnrsmzh^(l=ubzim%f8)wc^f3l'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-*@2l+^3a&bq0@8!*z_@p4jo2xnrsmzh^(l=ubzim%f8)wc^f3l'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'Databased',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'Databased',\n    'corsheaders',\n    'rest_framework_simplejwt',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\nEMAIL_HOST = 'localhost'\nEMAIL_PORT = 1025\nEMAIL_USE_TLS = False\nEMAIL_USE_SSL = False",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\nEMAIL_HOST = 'localhost'\nEMAIL_PORT = 1025\nEMAIL_USE_TLS = False\nEMAIL_USE_SSL = False\nEMAIL_HOST_USER = ''\nEMAIL_HOST_PASSWORD = ''\n# JWT Settings\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_HOST = 'localhost'\nEMAIL_PORT = 1025\nEMAIL_USE_TLS = False\nEMAIL_USE_SSL = False\nEMAIL_HOST_USER = ''\nEMAIL_HOST_PASSWORD = ''\n# JWT Settings\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_PORT = 1025\nEMAIL_USE_TLS = False\nEMAIL_USE_SSL = False\nEMAIL_HOST_USER = ''\nEMAIL_HOST_PASSWORD = ''\n# JWT Settings\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_USE_TLS = False\nEMAIL_USE_SSL = False\nEMAIL_HOST_USER = ''\nEMAIL_HOST_PASSWORD = ''\n# JWT Settings\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_SSL",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_USE_SSL = False\nEMAIL_HOST_USER = ''\nEMAIL_HOST_PASSWORD = ''\n# JWT Settings\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': False,",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_HOST_USER = ''\nEMAIL_HOST_PASSWORD = ''\n# JWT Settings\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': False,\n    'ALGORITHM': 'HS256',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = ''\n# JWT Settings\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': False,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': False,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'VERIFYING_KEY': None,\n    'AUTH_HEADER_TYPES': ('Bearer',),",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "ROOT_URLCONF = 'backend.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "WSGI_APPLICATION = 'backend.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nCORS_ALLOW_ALL_ORIGINS = True",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nCORS_ALLOW_ALL_ORIGINS = True\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.backend.urls",
        "description": "backend.backend.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('Databased.urls')),\n]",
        "detail": "backend.backend.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.backend.wsgi",
        "description": "backend.backend.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.backend.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.Databased.migrations.0001_initial",
        "description": "backend.Databased.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('password', models.CharField(max_length=128, verbose_name='password')),",
        "detail": "backend.Databased.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.Databased.migrations.0002_user_groups_user_is_superuser_user_user_permissions",
        "description": "backend.Databased.migrations.0002_user_groups_user_is_superuser_user_user_permissions",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Databased', '0001_initial'),\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='groups',\n            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),",
        "detail": "backend.Databased.migrations.0002_user_groups_user_is_superuser_user_user_permissions",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.Databased.migrations.0003_remove_guest_phone_number_alter_agent_user_and_more",
        "description": "backend.Databased.migrations.0003_remove_guest_phone_number_alter_agent_user_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Databased', '0002_user_groups_user_is_superuser_user_user_permissions'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='guest',\n            name='phone_number',\n        ),\n        migrations.AlterField(",
        "detail": "backend.Databased.migrations.0003_remove_guest_phone_number_alter_agent_user_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.Databased.migrations.0004_alter_user_id",
        "description": "backend.Databased.migrations.0004_alter_user_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Databased', '0003_remove_guest_phone_number_alter_agent_user_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='id',\n            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),\n        ),",
        "detail": "backend.Databased.migrations.0004_alter_user_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.Databased.migrations.0005_alter_user_id",
        "description": "backend.Databased.migrations.0005_alter_user_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Databased', '0004_alter_user_id'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='id',\n            field=models.UUIDField(default=uuid.UUID('e4b50d78-f936-4383-ae01-4f1d69d9447d'), editable=False, primary_key=True, serialize=False),\n        ),",
        "detail": "backend.Databased.migrations.0005_alter_user_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.Databased.migrations.0006_alter_user_id",
        "description": "backend.Databased.migrations.0006_alter_user_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Databased', '0005_alter_user_id'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='id',\n            field=models.UUIDField(default=uuid.UUID('6e1db8be-4424-457c-b62c-4807f98e9cf1'), editable=False, primary_key=True, serialize=False),\n        ),",
        "detail": "backend.Databased.migrations.0006_alter_user_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.Databased.migrations.0007_userprofile_remove_guest_user_remove_user_groups_and_more",
        "description": "backend.Databased.migrations.0007_userprofile_remove_guest_user_remove_user_groups_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Databased', '0006_alter_user_id'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserProfile',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('uid', models.CharField(max_length=255, unique=True)),",
        "detail": "backend.Databased.migrations.0007_userprofile_remove_guest_user_remove_user_groups_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.Databased.migrations.0008_faq",
        "description": "backend.Databased.migrations.0008_faq",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Databased', '0007_userprofile_remove_guest_user_remove_user_groups_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='FAQ',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('question', models.CharField(max_length=255)),",
        "detail": "backend.Databased.migrations.0008_faq",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.Databased.migrations.0009_faq_last_updated_alter_faq_question_feedback",
        "description": "backend.Databased.migrations.0009_faq_last_updated_alter_faq_question_feedback",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Databased', '0008_faq'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='faq',\n            name='last_updated',\n            field=models.DateTimeField(auto_now=True),",
        "detail": "backend.Databased.migrations.0009_faq_last_updated_alter_faq_question_feedback",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.Databased.migrations.0010_remove_faq_last_updated_delete_feedback",
        "description": "backend.Databased.migrations.0010_remove_faq_last_updated_delete_feedback",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Databased', '0009_faq_last_updated_alter_faq_question_feedback'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='faq',\n            name='last_updated',\n        ),\n        migrations.DeleteModel(",
        "detail": "backend.Databased.migrations.0010_remove_faq_last_updated_delete_feedback",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.Databased.migrations.0011_delete_faq",
        "description": "backend.Databased.migrations.0011_delete_faq",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Databased', '0010_remove_faq_last_updated_delete_feedback'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='FAQ',\n        ),\n    ]",
        "detail": "backend.Databased.migrations.0011_delete_faq",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.Databased.migrations.0012_agentlisting_images",
        "description": "backend.Databased.migrations.0012_agentlisting_images",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Databased', '0011_delete_faq'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AgentListing',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('hostelName', models.CharField(max_length=200)),",
        "detail": "backend.Databased.migrations.0012_agentlisting_images",
        "documentation": {}
    },
    {
        "label": "UserProfileAdmin",
        "kind": 6,
        "importPath": "backend.Databased.admin",
        "description": "backend.Databased.admin",
        "peekOfCode": "class UserProfileAdmin(admin.ModelAdmin):\n    list_display = ('name', 'email', 'phone', 'created_at')\n    search_fields = ('name', 'email' )\nclass AgentListingAdmin(admin.ModelAdmin):\n    list_display = ('hostelName', 'address', 'location', 'amenities', 'roomType', 'availability', 'roomsAvailable', 'price', 'created_at')\n    search_fields = ('hostelName', 'address', 'location')\nclass ImagesAdmin(admin.ModelAdmin):\n    list_display = ('image', 'created_at')\n    search_fields = ('image',)\nadmin.site.register(Images, ImagesAdmin)",
        "detail": "backend.Databased.admin",
        "documentation": {}
    },
    {
        "label": "AgentListingAdmin",
        "kind": 6,
        "importPath": "backend.Databased.admin",
        "description": "backend.Databased.admin",
        "peekOfCode": "class AgentListingAdmin(admin.ModelAdmin):\n    list_display = ('hostelName', 'address', 'location', 'amenities', 'roomType', 'availability', 'roomsAvailable', 'price', 'created_at')\n    search_fields = ('hostelName', 'address', 'location')\nclass ImagesAdmin(admin.ModelAdmin):\n    list_display = ('image', 'created_at')\n    search_fields = ('image',)\nadmin.site.register(Images, ImagesAdmin)\nadmin.site.register(AgentListing, AgentListingAdmin)\nadmin.site.register(UserProfile, UserProfileAdmin)",
        "detail": "backend.Databased.admin",
        "documentation": {}
    },
    {
        "label": "ImagesAdmin",
        "kind": 6,
        "importPath": "backend.Databased.admin",
        "description": "backend.Databased.admin",
        "peekOfCode": "class ImagesAdmin(admin.ModelAdmin):\n    list_display = ('image', 'created_at')\n    search_fields = ('image',)\nadmin.site.register(Images, ImagesAdmin)\nadmin.site.register(AgentListing, AgentListingAdmin)\nadmin.site.register(UserProfile, UserProfileAdmin)",
        "detail": "backend.Databased.admin",
        "documentation": {}
    },
    {
        "label": "DatabasedConfig",
        "kind": 6,
        "importPath": "backend.Databased.apps",
        "description": "backend.Databased.apps",
        "peekOfCode": "class DatabasedConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'Databased'",
        "detail": "backend.Databased.apps",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "kind": 6,
        "importPath": "backend.Databased.models",
        "description": "backend.Databased.models",
        "peekOfCode": "class UserProfile(models.Model):\n    uid = models.CharField(max_length=255, unique=True)\n    email = models.EmailField()    \n    name = models.CharField(max_length=200)\n    phone = models.CharField(max_length=20)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.name\nclass AgentListing(models.Model):\n    agent = models.ForeignKey(UserProfile, on_delete=models.CASCADE)",
        "detail": "backend.Databased.models",
        "documentation": {}
    },
    {
        "label": "AgentListing",
        "kind": 6,
        "importPath": "backend.Databased.models",
        "description": "backend.Databased.models",
        "peekOfCode": "class AgentListing(models.Model):\n    agent = models.ForeignKey(UserProfile, on_delete=models.CASCADE)\n    hostelName = models.CharField(max_length=200) \n    address = models.CharField(max_length=200)\n    location = models.CharField(max_length=200)\n    amenities = models.Choices('wifi', 'parking', 'security', 'cctv', 'laundry', 'kitchen', 'gym', 'pool', 'ac', 'tv', 'furniture')\n    roomType = models.Choices('single', 'double', 'triple', 'quad', 'dormitory')\n    availability = models.Choices('available', 'not available')\n    roomsAvailable = models.IntegerField()\n    price = models.IntegerField()",
        "detail": "backend.Databased.models",
        "documentation": {}
    },
    {
        "label": "Images",
        "kind": 6,
        "importPath": "backend.Databased.models",
        "description": "backend.Databased.models",
        "peekOfCode": "class Images(models.Model):\n    listing = models.ForeignKey(AgentListing, related_name='images', on_delete=models.CASCADE)\n    image = models.ImageField(upload_to='images/')\n    created_at = models.DateTimeField(auto_now_add=True)",
        "detail": "backend.Databased.models",
        "documentation": {}
    },
    {
        "label": "UserProfileSerializer",
        "kind": 6,
        "importPath": "backend.Databased.serializers",
        "description": "backend.Databased.serializers",
        "peekOfCode": "class UserProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserProfile\n        fields = \"__all__\"\nclass ImagesSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Images\n        fields = \"__all__\"\nclass AgentListingSerializer(serializers.ModelSerializer):\n    images = ImagesSerializer(many=True, read_only=True)",
        "detail": "backend.Databased.serializers",
        "documentation": {}
    },
    {
        "label": "ImagesSerializer",
        "kind": 6,
        "importPath": "backend.Databased.serializers",
        "description": "backend.Databased.serializers",
        "peekOfCode": "class ImagesSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Images\n        fields = \"__all__\"\nclass AgentListingSerializer(serializers.ModelSerializer):\n    images = ImagesSerializer(many=True, read_only=True)\n    class Meta:\n        model = AgentListing\n        fields = \"__all__\"",
        "detail": "backend.Databased.serializers",
        "documentation": {}
    },
    {
        "label": "AgentListingSerializer",
        "kind": 6,
        "importPath": "backend.Databased.serializers",
        "description": "backend.Databased.serializers",
        "peekOfCode": "class AgentListingSerializer(serializers.ModelSerializer):\n    images = ImagesSerializer(many=True, read_only=True)\n    class Meta:\n        model = AgentListing\n        fields = \"__all__\"",
        "detail": "backend.Databased.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.Databased.urls",
        "description": "backend.Databased.urls",
        "peekOfCode": "urlpatterns = [\n    path('create-or-update-profile/', create_or_update_profile, name='create_or_update_profile'),\n    path('user-profile/<int:pk>/', UserProfileView.as_view(), name='user_profile'),\n    path('agent-listing/', AgentListingView.as_view(), name='agent_listing'),\n    path('agent-listing/<int:pk>/', AgentListingDetailView.as_view(), name='agent_listing_detail'),\n    path('images/', ImagesView.as_view(), name='images'),\n    path('images/<int:pk>/', ImagesDetailView.as_view(), name='images_detail'),\n]",
        "detail": "backend.Databased.urls",
        "documentation": {}
    },
    {
        "label": "UserProfileView",
        "kind": 6,
        "importPath": "backend.Databased.views",
        "description": "backend.Databased.views",
        "peekOfCode": "class UserProfileView(generics.RetrieveAPIView):\n    queryset = UserProfile.objects.all()\n    serializer_class = UserProfileSerializer\nclass AgentListingView(generics.ListCreateAPIView):\n    queryset = AgentListing.objects.all()\n    serializer_class = AgentListingSerializer\nclass AgentListingDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = AgentListing.objects.all()\n    serializer_class = AgentListingSerializer\nclass ImagesView(generics.ListCreateAPIView):",
        "detail": "backend.Databased.views",
        "documentation": {}
    },
    {
        "label": "AgentListingView",
        "kind": 6,
        "importPath": "backend.Databased.views",
        "description": "backend.Databased.views",
        "peekOfCode": "class AgentListingView(generics.ListCreateAPIView):\n    queryset = AgentListing.objects.all()\n    serializer_class = AgentListingSerializer\nclass AgentListingDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = AgentListing.objects.all()\n    serializer_class = AgentListingSerializer\nclass ImagesView(generics.ListCreateAPIView):\n    queryset = Images.objects.all()\n    serializer_class = ImagesSerializer\nclass ImagesDetailView(generics.RetrieveUpdateDestroyAPIView):",
        "detail": "backend.Databased.views",
        "documentation": {}
    },
    {
        "label": "AgentListingDetailView",
        "kind": 6,
        "importPath": "backend.Databased.views",
        "description": "backend.Databased.views",
        "peekOfCode": "class AgentListingDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = AgentListing.objects.all()\n    serializer_class = AgentListingSerializer\nclass ImagesView(generics.ListCreateAPIView):\n    queryset = Images.objects.all()\n    serializer_class = ImagesSerializer\nclass ImagesDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Images.objects.all()\n    serializer_class = ImagesSerializer",
        "detail": "backend.Databased.views",
        "documentation": {}
    },
    {
        "label": "ImagesView",
        "kind": 6,
        "importPath": "backend.Databased.views",
        "description": "backend.Databased.views",
        "peekOfCode": "class ImagesView(generics.ListCreateAPIView):\n    queryset = Images.objects.all()\n    serializer_class = ImagesSerializer\nclass ImagesDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Images.objects.all()\n    serializer_class = ImagesSerializer",
        "detail": "backend.Databased.views",
        "documentation": {}
    },
    {
        "label": "ImagesDetailView",
        "kind": 6,
        "importPath": "backend.Databased.views",
        "description": "backend.Databased.views",
        "peekOfCode": "class ImagesDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Images.objects.all()\n    serializer_class = ImagesSerializer",
        "detail": "backend.Databased.views",
        "documentation": {}
    },
    {
        "label": "create_or_update_profile",
        "kind": 2,
        "importPath": "backend.Databased.views",
        "description": "backend.Databased.views",
        "peekOfCode": "def create_or_update_profile(request):\n    try:\n        data = json.loads(request.body)\n        token = data.get('token')\n        if not token:\n            return Response({'error': 'Token is required'}, status=status.HTTP_400_BAD_REQUEST)\n        # Verify the token\n        decoded_token = auth.verify_id_token(token)\n        uid = decoded_token['uid']\n        email = decoded_token.get('email', '')",
        "detail": "backend.Databased.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.manage",
        "description": "backend.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "backend.manage",
        "documentation": {}
    },
    {
        "label": "pdf_text",
        "kind": 5,
        "importPath": "backend.pdfextract",
        "description": "backend.pdfextract",
        "peekOfCode": "pdf_text = \"\"\nwith pdfplumber.open('Mobile_Application_Architectures.pdf') as pdf:\n    for page in pdf.pages:\n        pdf_text += page.extract_text() or \"\"\n# Extract tables using tabula\ntables = tabula.read_pdf('Mobile_Application_Architectures.pdf', pages='all', multiple_tables=True)\n# Save extracted text to a CSV file\ntext_file_path = 'extracted_tessxt.csv'\nwith open(text_file_path, 'w', newline='', encoding='utf-8') as text_file:\n    text_file.write(pdf_text)",
        "detail": "backend.pdfextract",
        "documentation": {}
    },
    {
        "label": "tables",
        "kind": 5,
        "importPath": "backend.pdfextract",
        "description": "backend.pdfextract",
        "peekOfCode": "tables = tabula.read_pdf('Mobile_Application_Architectures.pdf', pages='all', multiple_tables=True)\n# Save extracted text to a CSV file\ntext_file_path = 'extracted_tessxt.csv'\nwith open(text_file_path, 'w', newline='', encoding='utf-8') as text_file:\n    text_file.write(pdf_text)\n# Save tables to separate CSV files\nfor i, table in enumerate(tables):\n    table_file_path = f'table_{i}.csv'\n    table.to_csv(table_file_path, index=False)\nprint(f\"Text saved to {text_file_path}\")",
        "detail": "backend.pdfextract",
        "documentation": {}
    },
    {
        "label": "text_file_path",
        "kind": 5,
        "importPath": "backend.pdfextract",
        "description": "backend.pdfextract",
        "peekOfCode": "text_file_path = 'extracted_tessxt.csv'\nwith open(text_file_path, 'w', newline='', encoding='utf-8') as text_file:\n    text_file.write(pdf_text)\n# Save tables to separate CSV files\nfor i, table in enumerate(tables):\n    table_file_path = f'table_{i}.csv'\n    table.to_csv(table_file_path, index=False)\nprint(f\"Text saved to {text_file_path}\")\nprint(f\"Tables saved to table_0.csv, table_1.csv, ...\")\n\"\"\"import pdfplumber",
        "detail": "backend.pdfextract",
        "documentation": {}
    },
    {
        "label": "df_combined",
        "kind": 5,
        "importPath": "backend.pdfextract",
        "description": "backend.pdfextract",
        "peekOfCode": "df_combined = pd.DataFrame(rows)\ndf_combined.to_csv('output.csv', index=False, header=False)\n\"\"\"",
        "detail": "backend.pdfextract",
        "documentation": {}
    }
]